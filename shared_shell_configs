# Preferred editor for local and remote sessions
export EDITOR="/usr/bin/env emacs"

if [ "$(arch)" = "arm64" ]; then
	export ARCH="arm64"
fi

mkcd() {
	mkdir -p -- "$1" &&
		cd -P -- "$1"
}

# Homebrew shellenv

if [ "$ARCH" = "arm64" ]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
else
	if [ "$CODESPACES" ]; then
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	else
		eval "$(/usr/local/bin/brew shellenv)"
	fi
fi

# Extend PATH
export PATH="$PATH:/usr/local/sbin"

export DOTFILESDIR="$HOME/dotfiles"
if [ "$CODESPACES" ]; then
	export DOTFILESDIR="/workspaces/.codespaces/.persistedshare/dotfiles"
	eval "$ENV_VARS"
fi
# pipenv should be created in the project dir
export PIPENV_VENV_IN_PROJECT=1

# Poetry
export PATH="$HOME/.local/bin:$PATH"

# Python Tcl-Tk options for pyenv
export PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include' --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'"
export TK_SILENCE_DEPRECATION=1

if command -v pyenv 1>/dev/null 2>&1; then
	export PYENV_ROOT="$HOME/.pyenv"
	export PATH="$PYENV_ROOT/bin:$PATH"
	eval "$(pyenv init --path)"
	export ZSH_PYENV_VIRTUALENV=true
fi

if [ "$(uname)" = "Darwin" ]; then
	if command -v nodenv 1>/dev/null 2>&1; then
		export NODENV_ROOT="$HOME/.nodenv"
		export PATH="$NODENV_ROOT/bin:$PATH"
		eval "$(nodenv init -)"
	fi
fi

if command -v rbenv 1>/dev/null 2>&1; then
	export RBENV_ROOT="$HOME/.rbenv"
	export PATH="$RBENV_ROOT/bin:$PATH"
	eval "$(rbenv init -)"
fi

PLAN9=/usr/local/plan9
export PLAN9
export PATH="$PATH:$PLAN9/bin"

# dotnet
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export PATH="$HOME/.dotnet/tools:$PATH"

# GNU dependencies for building some Homebrew formulae, like Emacs
export PATH="$HOMEBREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH"
export PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"

# Brew curl first in path
export PATH="$HOMEBREW_PREFIX/opt/curl/bin:$PATH"

notify() {
	local msg
	local result
	local curl_exit

	msg="$*"
	result=$(curl --show-error --silent -o /dev/null -w '%{http_code}' \
		--form-string "token=$PUSHOVER_API_TOKEN" \
		--form-string "user=$PUSHOVER_USER_KEY" \
		--form-string "message=$msg" \
		"$NOTIFICATION_URL")
	curl_exit="$?"

	if [ "$curl_exit" -ne 0 ] || [ "$result" -ne 200 ]; then
		echo -e "\aNotify curl failed with $curl_exit and HTTP $result." >&2
		return 10
	fi
}

# go
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin"
export PATH="$PATH:$GOROOT/bin"
gt() {
	go test "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/''
}
gtv() {
	go test -v "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/''
}
gtb() {
	go test -bench=. "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/''
}
gtbv() {
	go test -v -bench=. "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/''
}
gtc() {
	local t=$(mktemp -t cover)
	go test $COVERFLAGS -coverprofile="$t" "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' &&
		go tool cover -html="$t" &&
		unlink "$t"
}
gtch() {
	local t=$(mktemp -t cover)
	go test $COVERFLAGS -covermode=count -coverprofile="$t" "$@" ./... | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' &&
		go tool cover -html="$t" &&
		unlink "$t"
}
alias gl="golangci-lint run"

# Emacs config
edl() {
	emacs --eval '(desktop+-load "'"$1"'")'
}

# Starship configs
export STARSHIP_CONFIG="$HOME/.starship.toml"

# ripgrep configs
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# Aliases
alias cdr='cd $(git rev-parse --show-toplevel)'
alias gcce="gcc -Wextra -Wpedantic"
alias cs="gh codespace ssh"
alias csc="gh codespace code"
alias old='cd $OLDPWD'
alias edp='rm .emacs-buffers & rm .emacs.desktop'

if [ "$(uname)" = "Darwin" ]; then
	# GCloud
	export USE_GKE_GCLOUD_AUTH_PLUGIN=True
	source "$HOMEBREW_PREFIX/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
fi

# Prepend brew-installed libraries and includes
export LIBRARY_PATH="$HOMEBREW_PREFIX/lib"
CPATH="$CPATH:$HOMEBREW_PREFIX/include"

export PSES_BUNDLE_PATH="$HOME/.pses"
export SESSION_TEMP_PATH="$HOME/.pses/session"

export PATH="$PATH:bin"

SHARED_SHELL_CONFIGS="true"
export SHARED_SHELL_CONFIGS
