#!/usr/bin/env bash

# sudo access until finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

if [[ $CODESPACES ]]; then
	# Always want to use ZSH as my default shell (e.g. for SSH)
	if ! grep -q "root.*/bin/zsh" /etc/passwd; then
		sudo chsh -s /bin/zsh root
		if ! sudo chsh -s /bin/zsh vscode; then
			sudo chsh -s /bin/zsh codespace
		fi
	fi
fi

if [[ $(arch) == "arm64" ]]; then
	ARCH="arm64"
fi

# Enable touchID sudo authentication
if [[ $OSTYPE == darwin* ]]; then
	chmod +x script/touchid-sudo.sh
	script/touchid-sudo.sh || exit
fi

# SSH settings
mkdir -p ~/.ssh/sockets
ln -sfv "$DOTFILESDIR/ssh_config" "$HOME/.ssh/config"

HOSTNAME="$1"
DOTFILESDIR="$(pwd -P)"

if [[ $OSTYPE == darwin* ]]; then
	sudo xcodebuild -license accept
fi

# Make folder for code
mkdir -p "$HOME/Developer/work"

# Make folder for GnuPG
mkdir -p "$HOME/.gnupg"

# Make local bin folder
mkdir -p "$HOME/.local/bin"

# copy GPG config
ln -sfv "$DOTFILESDIR/gpg.conf" "$HOME/.gnupg/gpg.conf"
ln -sfv "$DOTFILESDIR/gpg-agent.conf" "$HOME/.gnupg/gpg-agent.conf"

# Copy GitHub webflow GPG key
curl https://github.com/web-flow.gpg | gpg --import

# Correct permissions on .gnupg dir
chown -R "$(whoami)" "$HOME/.gnupg/"
chmod 700 "$HOME/.gnupg"

# copy Git configs and templates
ln -sfv "$DOTFILESDIR/gitconfig" "$HOME/.gitconfig"
ln -sfv "$DOTFILESDIR/gitignore" "$HOME/.gitignore"
ln -sfv "$DOTFILESDIR/git-templates" "$HOME/.git-templates"
ln -sfv "$DOTFILESDIR/git-commit-message" "$HOME/.git-commit-message"
ln -sfv "$DOTFILESDIR/gitconfig-personal" "$HOME/.gitconfig-personal"
ln -sfv "$DOTFILESDIR/gitconfig-work" "$HOME/.gitconfig-work"
ln -sfv "$DOTFILESDIR/gitconfig-codespaces" "$HOME/.gitconfig-codespaces"

# Install Homebrew packages
if [[ $CODESPACES ]]; then
	# If Brew isn't installed in Codespace, install it
	if ! [[ $(eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)") ]]; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	fi
	# Install Codespace Homebrew packages
	brew bundle install --no-lock --file codespaces_Brewfile
	BREW_STATUS="$?"

else
	# Install Brew if not in Codespace
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	brew bundle install --no-lock --file macos_Brewfile
	BREW_STATUS="$?"
fi

# Install common Homebrew packages
brew bundle install --no-lock
BREW_STATUS=$(($? + BREW_STATUS))

if [[ $OSTYPE == darwin* ]]; then
	# Set up launchdns
	script/dns.sh || exit
else
	if ! [[ $CODESPACES ]]; then
		sudo apt-get update
		sudo apt-get install -y emacs
	fi
fi

if ! [[ $CODESPACES ]]; then

	# Install Oh My Zsh
	(sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && exit)

	# Set up Emacs config
	mkdir -p "$HOME/.emacs.d/straight"
	ln -sfv "$DOTFILESDIR/init.el" "$HOME/.emacs.d/init.el"
	ln -sfv "$DOTFILESDIR/straight/versions" "$HOME/.emacs.d/straight/versions"
	mkdir -p "$HOME/.emacs.d/transient"
	ln -sfv "$DOTFILESDIR/transient/values.el" "$HOME/.emacs.d/transient/values.el"
	echo "(load \"$HOME/.emacs.d/init.el\")" >>"$HOME/.emacs"
	emacs --batch --load "$DOTFILESDIR/init.el" --eval '(straight-thaw-versions)'
else
	# Fix locale issue on Codespaces
	sudo find /etc -type f -exec sed -i 's/C.UTF-8/en_US.UTF-8/g' {} \;
fi

if [[ $OSTYPE == darwin* ]]; then

	# Link Emacs.app to Applications directory
	ln -s "$HOMEBREW_PREFIX/opt/emacs-plus@28/Emacs.app" "/Applications"

	# Run Emacs as a background launchctl service
	brew services start d12frosted/emacs-plus/emacs-plus@28
fi

# Set up shell configs
ln -sfv "$DOTFILESDIR/.zshrc" "$HOME/.zshrc"
if [[ $CODESPACES ]]; then
	ln -sfv "$DOTFILESDIR/.zlogin" "$HOME/.zlogin"
fi
ln -sfv "$DOTFILESDIR/.bashrc" "$HOME/.bashrc"
ln -sfv "$DOTFILESDIR/.shared_shell_configs" "$HOME/.shared_shell_configs"
ln -sfv "$DOTFILESDIR/starship.toml" "$HOME/.starship.toml"
mkdir -p "$HOME/.config/powershell"
ln -sfv "$DOTFILESDIR/profile.ps1" "$HOME/.config/powershell/profile.ps1"

if [[ -e "$HOME/.shared_shell_configs" ]]; then
	source "$HOME/.shared_shell_configs"
fi

if [[ $OSTYPE == darwin* ]]; then
	# Open Karabiner for the first time
	open "/Applications/Karabiner-Elements.app" && sleep 60
	killall "Karabiner-Elements"
	ln -sfv "$DOTFILESDIR/karabiner.json" "$HOME/.config/karabiner/karabiner.json"

	# Set up macOS system configs
	chmod +x script/macos-setup
	script/macos-setup "$HOSTNAME" || exit
fi

# Install Poetry
if [[ $OSTYPE == darwin* ]]; then
	curl -sSL https://install.python-poetry.org | python3 -
	script/poetry-setup
	POETRY_CONFIG_PATH="$HOME/.config/pypoetry"
	if [[ $OSTYPE == darwin* ]]; then
		POETRY_CONFIG_PATH="$HOME/Library/Preferences/pypoetry"
	fi
	mkdir -p "$POETRY_CONFIG_PATH"
	ln -sfv "$DOTFILESDIR/config.toml" "$POETRY_CONFIG_PATH/config.toml"
fi

# Install go tools
mkdir -p "$HOME/go"
go install golang.org/x/tools/...@latest

# Install language servers
script/language-server-setup.sh

# Install iTerm2 shell integrations
curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh
curl -L https://iterm2.com/shell_integration/bash -o ~/.iterm2_shell_integration.bash

if [[ $OSTYPE == darwin* ]]; then
	# Make user-specific Applications directory
	mkdir -p "$HOME/Applications"
	if [[ "$BREW_STATUS" -ne 0 ]]; then
		echo "Homebrew Bundle failed, check logs" && exit "$BREW_STATUS"
	fi
fi

if [[ $CODESPACES ]]; then
	notify "Codespace $CODESPACE_NAME ready"
fi
